service: ingredients
custom:
  pythonRequirements:
    dockerizePip: non-linux
  dbUsername: "meez_user"
  dbUserPassword: "meez20220517pass"
  dbInstanceIdentifier: "meez-db-instance"
  dbName: "meez__db"

provider:
  name: aws
  runtime: python3.8
  tracing:
    lambda: true
  environment:
    DB_NAME: ${self:custom.dbName}
    DB_USERNAME: ${self:custom.dbUsername}
    DB_USER_PASSWORD: ${self:custom.dbUserPassword}
    DB_INSTANCE_IDENTIFIER: ${self:custom.dbInstanceIdentifier}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "rds:*"
      Resource:
        - "*"
functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: "/search/{owner_id}"
          method: get
resources:
 Resources:
  CloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt: ["CloudWatchRole", "Arn"]

  pgSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acess to Postgre
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: 0.0.0.0/0

  PostgressDB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: "10"
      DBName: ${self:custom.dbName}
      DBInstanceIdentifier: ${self:custom.dbInstanceIdentifier}
      DBInstanceClass: "db.t3.micro"
      Engine: "postgres"
      MasterUsername: ${self:custom.dbUsername}
      MasterUserPassword: ${self:custom.dbUserPassword}
      VPCSecurityGroups:
      - Fn::GetAtt:
        - pgSecurityGroup
        - GroupId
      Tags:
        -
          Key: "Name"
          Value: ${self:custom.dbInstanceIdentifier}
    DeletionPolicy: "Snapshot"
plugins:
  - serverless-python-requirements
